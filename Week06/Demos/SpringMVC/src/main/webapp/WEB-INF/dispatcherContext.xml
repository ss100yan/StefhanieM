<?xml version="1.0" encoding="UTF-8"?>
<beans
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans">

	<!-- Enable MVC annotations. -->
	<mvc:annotation-driven></mvc:annotation-driven>

	<!-- This configures a handler for serving static resources when using our 
		Internal Resource View Resolver. -->
	<mvc:default-servlet-handler />

	<!-- We have to tell the framework which packages to scan for our controller 
		classes. -->
	<context:component-scan
		base-package="com.revature.web"></context:component-scan>

	<!-- We have a single Spring bean to configure here. It is our Internal 
		Resource View Resolver, which will allow us to use Spring Controllers to 
		return static views to the client. Note that we don't ordinarily use this 
		Internal Resource View Resolver since we know a frontend framework. -->

	<bean name="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- We will configure a few properties here that determine how our view
		resolver attempts to resolve our views. -->
		<property name="prefix" value="/static/views/"/>
		<property name="suffix" value=".html"/>
	</bean>

</beans>